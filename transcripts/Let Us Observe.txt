Thank you everyone, for joining this tribe meeting. Let us start in another 1 minute. Those who want to talk please raise your hand so that I can admit to the stage. Thanks for joining. I know it.
Thank you.
Good evening. Just wait for one more minute and then we can get started. Today's topic is let us observe. Thanks everyone, for joining this meeting. A meeting. I'm getting some. Yeah. Thank you. I think this is our 13 club meeting. I think we started two months ago. So right now we have around 420 plus members in the club. So thanks for your support. So today we are going to discuss about observability. Let us observe. This is the topic. So before we get into the topic, I would like to share a few updates. So yesterday the new book has been released. I don't know how many of you seen this. It's Hiking Guide to Load Testing Projects. So this book is a ten by senior performer with the handle he will use in the online. So the author name is Leandro Melendez. So he's the author. So he has published a book called The Hitch Hiking Guide to Load Testing Projects. This book is available in Kindle and also you can order in paperback. I think it is $15 for the hard copy and for Kindle Unlimited. I think it is. I don't know if you have a membership. It is free. I'm not sure about the pricing in India. So you need to check the Amazon website. So this book is from Press Bytes, publisher Press Bites Press. So I know many of you know, right? Mark Tomlinson and James Pull. So these are some industry leaders. They formed this publication and they released their first book called Hitch Hiking Guide to Load Testing Projects. So this is not a sponsor. I just happen to read this book yesterday so it is very good. Almost completed it. So it is for everyone, even for basic beginners, even if you have a five day experience or an experience. Right? It is for everybody. I think it is one of the must read book for the performance tester. So if you get a chance, please check it out. I will be posting my review today, so I'm half way through today. I will be completing the rest of the book and then I will post my review about this book. So this is one update and another update is next month. The Red Line 13 is conducting a conference online conference. It is called the Load Test World. Com. So if you go to Load Test World. Com you can see the schedule. So there are many speakers speaking about various topics. So I'm also speaking about a meter and the GitHub action. So how you can leverage the GitHub action for JMeter. So this is my topic. So please check it out and register. You can see. Excuse me, it is free and you can just turn on. You can view it online. So these are the two updates I would like to share before we start into the topic. So those who are new, please raise your hand. I can admit to the stage. Okay. How many of you use Observability tool in your current project? Actually, you may not know whether its observability or not, right. But usually nowadays all APM tools are observability. So I guess you'll be using any one of the observability tools in the industry. So anybody is using very specific to this use case observability or someone dining trace new lick anything. Now what? Everything is observability. Thanks for joining. I have it on. Sorry I couldn't hear you. I okay. Thank you, Ian. Thanks for joining.
Hey, thank you. So we are using currently data dog.
Ok, cool. That is awesome. Okay, so before we start seeing about servility, the term right, we are going to time travel how this term has evolved from past many years. So first thing is, it is not a new term. It has been there for many decades. So the first term this term has appeared in the control theory and mechanical engineering. This is the field. The term appeared in 96. So in mechanical engineering, or if you are a control system engineer, definitely. You know the term the definition goes like this. How well you can understand the inner workings of a system simply by observing it from the outside. So this is the official definition of observability from mechanical engineering perspective. So the same thing, we are going to apply it in our cloud native one moment. So how well you can understand your system by simply observing it from the outside. So this term has come into light because of Twitter. So Twitter in 2013 they moved from monolith to micro service architecture. So at the time people may not know it is a micro service, but the architecture is micro services. So that is why the term started evaluating. After Twitter. There's a blog post is there in the Twitter blog. You can check it out, how they moved from a monolithic to distributed architecture and what issues they are faced and how they started monitoring the whole system. So in 2013, I guess that is where the evolution begins in terms of observability. So anybody work for Bitter or any other companies like any product based companies in our group? Anyone? Because I want to hear from product engineering perspective, what is how you guys are monitoring the systems? Many of us is working for service. Best company. I know, but I would like to see if someone is looking for the product based companies.
Yes.
Currently I'm working for a product based company. So previously we used to we still use like for business and product. Those people they generally use open source tools like Ravana and those type of dashboards. And for us where we are doing profiling and everything. Previously we used to use new Relic. But since this year we have switched on to data Dogs because we find a lot more cloud integrations with Data dog and for profiling purposes, it is much more handy than neutral and basic. When we are doing the testing and all those type of profiling stuff we are using Jconsole or Profiled up for that as well.
Okay, got it. Okay, cool. Thanks for sharing your input. So what you ask is right before 2014 or 2013, whenever you visit Dining Res website or new Relic website or Splunk, right, they will advertise as an 08:00 p.m. Vendor. So I know how many of you noticed this back in around seven or eight years ago. What other website you visit? They just mentioned. Okay, APM Leader or APM vendor. But this term has changed again in 20 00 15,016. Right. Everybody started talking about Observability because of the evolution of the micro service architecture, and there are a lot of problems you will face when it comes to monitoring in the cloud native. One moment. So this term picked up by all the APM vendors and they started heavily advertising on the observing platform. So nowadays if you visit the In Trace or new record plan any website, any vendor, they always say, okay, Observability platform leader in one of the Observability. So this is what they start at a racing. So this game has evolved from monitoring to servility. So from APM to Observability. So what is the difference? So why can't we debug issues just by monitoring? Or do we need to have only the Observability? So there are core differences. Main thing is, if you put more effort into observe monitoring, then you started observing your system. This is one of the definition I can say. So it is like a subset monitoring a subset and ability as percent monitoring means. For example, say you want to monitor CPU, CPU will monitor and if it goes beyond the you say, okay, something is going on bad. What if the memory utilization is 80 percentage more? Then again, the system will crash just by seeing some chart or graph. We can say, okay, something is bad is going to happen or something bad has happened already. Then we need to double. So this holds good for a monolithic architecture. Some system right? If you want to monitor, you just monitor the instance. But how do you monitor if it is a very cloud native enrollment like you don't know how many parts you will be running, how many containers you'll be running. There are like tens and thousands of upstream and downstream components. So your architecture right? It will scale wide and deep, so deep means whenever you see something in a dashboard or some pure path or something in to whatever tool you're using. Right? You'll see only the two dimensional view. Correct. You don't know what's going on beyond the two dimensional. So you need to again go behind the scenes and see how many systems. We are learning how it scales, how it deep inside the particular architecture. Right. So that is where the Observability the framework comes in the picture. So here, since everything is a cloud native. Right. You need to have this kind of approach to monitor each and everything. Just by seeing the output, you can understand what's going on on the inside. So that is why the term involves a lot of vendors are there nowadays. Nowadays, all the APM tools becoming servility. And there are a lot of new players out there. You don't even know the name, actually. So when I was browsing yesterday, I saw about a Kibble. There's a company called Ribble and Observable. There's another company are observable blameless. So there are so many small, small vendors are playing in the Observability market. And again, we have big shots like Diners, new real Splunk data dog. So these are again when established ability platforms under Light step. I don't know how many of you heard about Light step. Light run and we have honey comb. Right. So again, these are so many vendors in the Observability stack and there is excellent blog is available. I will post all the links, whichever I'm mentioning. Right. I will post my YouTube video. So there is a person called Ben. He is a cofounder of Light Step. So he was working for Google. He created a system called Dapper. I don't know how many of you know this Dapper dapper, again, is created for Google to monitor the performance of the architecture of the environment. So they have a particular term called distributed tracing. So these are some bus words you will hear. Right. Distributed tracing and then open telemetry, open senses, open tracing. So these are again buzz words of Observability. So again, you would have heard three pillars of observability. Right. Do you know what is the three pillars of observed with anyone? Three pillars of Observability? Again, this is a debatable topic. Some industry leaders say by using three pillars, you cannot observe everything. There is a problem in these three pillars. So we have to go beyond these three pillars. But in the initial days, the marketing term for any vendor, these three pillars, which is a metric logs and traces. So by using these three stuff, we can observe our entire platform. But there are industry leaders who disagree with this. Metrix log space is not sufficient enough to observe any platform. So we need to go beyond that. So there are different approaches, different views coming from different various industry leaders. So you have to go through a lot of use cases, a lot of blog articles to understand what's going on in this industry, the observability industry, because as a performance engineer, we cannot just sit and run the test and open some dashboard and give our results. So it's not going to work in the future. So this is the time you need to start into more into observable so we have to understand how the internal system works by seeing from the outside. Right. And you need to learn a couple of basic tools like a adapter or zip in. So these are the eyes. I can say the beginning of observability. Right. So these are the tools that are created by multiple companies over Twitter, Google. These companies created many open source project to understand the cloud native architecture. So you have to start learning at least what is distributed tracing, how it works, how we can inject this in a legacy system or in a new system, how we can inject a code, what kind of framework we are going to adopt again, there are various frameworks in the observe it stack. One popular is standard is open telemetry. Again, it's not a standard, but people follow this open telemetry framework. So if you go to open delimited IO, you can see what is open telemetry and what languages supports it, integrates with what framework, etc. You can see this particular open perimetry was formed combination of two things one open census and open tracing. So there are two different entities. One is from Google. I think one is for Mother company. I forgot it is Uber or two. I don't know. So these two things were independently working. I think about a couple of years ago then since the objective is same is very similar. Then they measured it together to form Open elementary. So now if you want to adopt the Observability, then you have to adopt this framework open elementary framework so it supports various languages. Then you can use the tools for a trade or whatever tool you are using. Then you can see the output in the graph. So Dieters, by default I have seen the distributed dressing in my environment. I'm not sure how it works in other environment, but Diane Trace started tracing everything so that you can have a clear picture. So I think the case would be same with respect to new like Dear Dog or whatever it is. So all the APM tools have now focusing on Observability. So any costings guys. I know, I know there are a lot of information to process, but this is our starting point to discuss the let me admit a few folks. Hi.
This is my first meeting here. So I'm here in Los Angeles. My small thought after hearing and I may be wrong, but a small thought. I guess you wonderfully explained a lot of things. What we can do is a little bit dwell deep into your environment. But what was your observation? What value you could get from the tool? So learning about 100 tools is all it's good, but I think we can we can delve into a little bit more into the tool aspects and what value it gives. I think that can be helpful is usually right.
I don't learn a tool. I never learn a tool because to learning if you are contained to one tool. So we have to learn the concept. Right? Even I tried many people in performance testing engineering. Right. I always tell don't learn Jameer, don't learn load or not. Just learn the contours behind each feature, then everything will be same across the tools. For example, if you take data parameterization. So this approach might be the difference. We use CSV data config in JMeter. So we use that file in loader, but the concept is still the same. So by learning one thing, you can run multiple tools if you understand the concept the same. All good for any approach. Right. For example, if you want to learn observability, so instead of learning or in trays or say open zip King so you can learn. Okay, how tracing works. Basically, what is tracing using the tracing ID, how I can go deep into my architecture and see what's going on in my layer. So we have to learn that concept if you learned that one the rest of the tools. Almost all the tools are similar by implementing this pricing content. Okay, so I have posted a couple of videos about this, how trading works and how we can see each tracing the span and what is span again and how we can fix the issue by just tracing the request so you can check it out. I don't know if you see my channel Insights, you can just go to my YouTube channel and you can see I think I posted about Istana him insane and signs. So these three tools I have posted many tools I am planning to post eventually.
Not being helpful on the weapon.
Yeah, that good. Thanks.
Thank you. A yes, sir.
Now we know the open telemetry. I can understand it is a technology or inbuilt mechanism to which all the API tools are having. So what is the exact need for us to understand that mechanism? That technology. So we have the tool and we are finding the Botanics. So what is a real need for us to get deep into their algorithm and their technology to trace the issues?
What do you mean that the algorithm? Could you please explain on that?
So, for example, you say Blank is using open telemetry inside as a technology to to trace and show us the locks everything. So it is doing by itself. So what is the need for us to understand what is happening inside Blank and everything?
No, I'm not saying what you should learn, what is happening inside the plank, sister. I'm just saying you need to learn this distributor tracing and the open telemetry how the framework works. This will be helpful to trace your request and see what's going on in your application and this will be helpful to fix your performance use.
Okay.
Go ahead.
That's it. Maybe once I learn more about it, maybe I can understand it properly. We can discuss in very slogan States. Yeah, right. There is too early to talk very deep into this.
Yes, but see, club house is such a thing. Again, I'm new to this. Your room. I think you mentioned there are eight sessions already. So pardon my ignorance, but I had okay, good. So I'm hiking actually on a trail is a little panty. So what I mean is the level, right? Hub audience skill level can vary so I don't know. How do you want to cater one area for me? I am heading a team, but that doesn't mean anything. Everyone is learning in this world the head or be the bigger. So I am skilled in some area which other guys may not right. I have gained my knowledge from experience. So what I want to say is I don't know, how do you cover the basics? So someone wants to see the tracing aspect, right? What exactly tracing you're talking about? As you mentioned, a request tracing. Now what are we talking? Do a little deeper into that. I give an example. That's one way for someone who is new to this topic. So that's my son that there.
Yes, everyone is learning, even learning the excuse me, even I'm also learning observability topic is kind of a new from past six months I've been into this. So I'm working on various tools. I'm exploring various things. So I'm just trying to get started with this topic as a first thing so that eventually we will conduct more sessions on deep diving into this servility.
Yeah, that can be very helpful because as you yourself set like tools, they can hundred tools for us. Just one tool. I mean the concept being to understand, what do we mean by tracing? What do we mean by placing a web request? I mean digging deeper. Right? That's the understanding. Probably.
Yes, we are going to see eventually everything about this observability. This is the second we have been started with respect to observability.
Platform is good stuff. Good initiative.
Hi. Thanks for joining.
Hey man, I was in the meeting, but I was a listener. Keep on listening. Yea.
Any input from your side? An observant it platform you guys are using?
I think I like same thing. You have covered everything except different tools and everything and one input I would like to give like yesterday or day. First. Today I attended Value lab session for a series. So there I have directly asked this question. So now you people are saying everything is availability and cloud and everything.
Right?
So what is the role of our performance engineers? Straight question. I shoot. And I have also asked one more question. Like what are the skill sets we need to develop. So I think you have answered the skill sets about topic long back. So many scripting language like that would be fine. That's what they said. And a little bit knowledge about not in depth knowledge. But you should have a good knowledge. But what is the cloud and containers where your architecture is applying a micro services list and note.
Yes.
And they covered this topic observability. So as a performance engineer, you need to involve that part. That information I got from yesterday be first today meeting noting it's. Really thanks. You are given your an initiative to introduce Observability. Thanks for that.
Yeah. Thanks. Yes. Even for me, we just started embracing the line trace feature. It open that tracing mechanism. So we just implemented around six months ago. I've been working on that. Yes, we need to whenever we have a tracing. So tracing means it is like a following the path of your Http request, starting from browser to back end and again from the back end to the browser. So for each top each layer, you will see what's going on. And for each layer again, you will get the response time. So that is called span. Span is like a unit of work. That span might cross multiple layers or might be contained to one layer. And by seeing this tracing chart, you can see how long it is spending in each layer for your request. So there's a very high level over you about the pricing mechanism.
One question. If you are injecting this in our life cycle, it would be a or water fill performance engineering or Agile performance two separate entities, or you're merging in your performance engineering.
My project is there anyway, a methodology, the dining tree library. Right. Whatever agent we install, so that has an automatic capability which will inject the code for tracing because they follow the standard of framework open telemetry. So again, if it is a very legacy system, again, you may not be able to inject as a code. So then you need to rely on your agents which agent you are going to install. Otherwise, you can ask development team to code for pricing manually by leveraging the like the standard libraries like Python or whatever language you are using. So we need to write the open telemetry where you want to capture the spam, so you have to write it manually so that it will appear in your dashboard. For legacy systems. People use agents.
Now it's more clear than I was and a reception that is a separate entity as part of what we are doing, like performance engineering and monitoring and everything. So we need to same tools we can utilize some extra code need to be injected as a.
Service. So that yes. Go ahead. Sorry.
I also I believe they do also observe it. If I'm not wrong in the Pro infrastructure team, they will be monitoring the performance of the app or micro services everything. If I'm wrong, they're following with this term. Right?
Yes. In production. Yes. Mainly production. Yes.
A.
A is observed the platform. So even if you open Grana. Com, they have changed the terms they use for marketing purposes or just two days. Right. So now it is an observably platform. Asanas Observable platform.
Okay. Yeah. Now that makes more clear. Thanks, man. Now the clouds are clear. Yeah.
So, you know, you are using Rafa, but you don't know where so many of us doesn't know about the Dot feature. That particular tool or solution has. So we have to embrace the features they are bringing to the the product. So Graham is conducting again, they're conducting a conference. I think next month I think it is called Observability Con October 1 week or so. So again, you can register for that. And then you can get more information about the Observability. I also submitted one talk for the conference. It is not accepted. Once it is accepted. I'm going to talk about a meter on how you can, how you can put the absolute stack, how we can bring the absolute stack by combining with the geometer. So.
Practically you have started, right? I mean, like six months you started using the subject.
Yes. Using dietary.
So if you could get any time, some good example in your lives or anything. Yes.
Diane Rice is very simple because of an agent. The implementation is kind of very simple. But again, it depends on your architecture, which is a very legacy you need to rely on agent. If you're very modern, then you have to put in some code. But again, the interest automatically gives you the picture of the distributed tracing.
So.
That a dog. I think someone is using Data dog. So how is the data dog work? Any input from that? I think you are there. Still, I guess the left, I guess. Okay. I think we join. I guess 70 is the highest. Anyone. Thanks for joining. I.
Just help you clarification. So when we say distributed rising rate. So what I see from fans like we are plotting charts for I remember other things. So how do we say I refuse?
You have to embrace that open telemetry framework in our infrastructure. So we have that open limited framework embedded. Then you can see the tracing information in Grana dashboard.
Okay.
So again, we are going to bring the observation of the chart, right?
No.
The Tracy, I'm talking about tracing, not the charts or graphs. Okay.
So then we use the trading then now.
So if you have a tracing capability embedded in your infrastructure, for example, you have a web player or app player, and you have enabled the say you have a tracing feature. Right. So if you open Rafa, you can clearly see if you search for I'm not sure about the dashboard name, but there is a section where you can add the panel to view the range bar charts. So if you open that, you can clearly see for the particular request how your request is traveling across multiple hops. And then for each hop, what is the response time and what is the code of execution? Okay.
I'm using a diner price. How to know the distributor tracing is enabled in that.
Okay. So if you open pure path, any pure path, right. If you open the few art page at the top, right, you can see the tracing ID. Okay, so each few parts will have a unique trace ID. So that is the unique identifier to identify your tracing for the particular request.
You mean the client in fair or tracing and ear is different.
The name itself, the tracing ID Colin, and some unique random number will be the random string will be there. Okay, if that is there, then the pricing has been enabled. Open testing is there. Sorry. What infrastructure?
Okay, so when we say APM tool and observably.
Right.
So how do we differentiate both are taking the EndToEnd timing from starting home inside server, everything, til, database, everything.
No, there's a difference between APM and observability. So for example, the last week I have told you so, for example, you are going to participate in a race. Then you want to measure your performance, your stamina. So what you do is you go to a doctor or you will run it in a tredmill and people take measurements at so heart rate, blood pressure and what's your height? They eat everything. Right. So they started monitoring your say heart rate, for example, heart rate up the pressure. So they just put some graph or chart. They just monitor your body vital. But then after a few minutes say your heart rate is increasing. As is increasing. So the servility platform, right. It will say why it is increasing. It will give you a clear picture. Okay. Why my heart rate is increasing. Why? My blood pressure is increasing. But monitoring tool will say, what is the heart rate? What is the blood pressure? So the Y part, the Observant platform will be able to help you to deep dive because of cloud native environment. So it is not a legacy. It's not a two tier or three tier architecture. You architect your environment, right? It will scale deep. You may not know when it will scale in when it will scale out. So in that case, by just simply embracing the APM capability, you cannot observe your internal systems, how it is behaving. So you need observability stack and you need to embrace the open telemetry standards to make yourself distributed tracing. And then you can view your dashboard. Okay. If something moves down or moves up, you can clearly easily deep dive into the particular area.
Okay.
Because mainly because of cloud native, only this technology term has evolved. So we don't have cloud native, then there is no ability.
Maybe if I go through your videos.
I get a better idea.
Yes. You do not know when your parts will scale up, when your parts will scale down. Right? You do not know. And simply by logging the information again, you will get millions of records in 1 minute. You will get millions of records. So how do you slice and dice the record. It is not possible. We need it is possible, but it will take time. By the time your production failure will expand its radius and it will be a total. The total zone will be dead. So that is why we need this kind of mechanism to see what's going on.
I sit here. I have a live example with me, which is what I'm working now. Yes, but we are not implemented that observability though. Like I said, I'm working on micro services. So I think what I'm doing is manually two deep dive which is covered by observably. That's what I feel. So micro services it will interact with several backend micro services so I could able to say my app is very good after doing performance listing and one of the response time. If I want to back press it the Max response time. When I said back in micro services other micro services team so your micro services causing problems by tracing that transaction, they said no, ours is good. So I think this kind of situation in the cloud will be avoided by availability, traceability and observability, I guess. Trust me, we had a fight for one week against all the different different micro services team. My micro service is good. My micro services do so I was scaling good. Ours is scaling good. I think this kind of situation at our situation and a situation will be absorbed by your abilities.
Can you elaborate when this micro service is because I'm very interested in Microsoft.
What is it? What is your question for the depot? Hello. I.
Think he's asking about the micro services about your micro services.
So in a micro services Dept, we test the performance of the app. Performance. Micro service is kind of a widget. It's not completely app. If you have 100 features, if you want to make one important feature as a micro service and put it in your widget like what you put your widget on your phone. Micro services will be deployed and shared across the request clients or apps or micro services which will be utilizing this widget. In the scenario, we could be able to only see my micro services app performance is good when it applied for the two or three instances in the cloud, so it will work fine. But there will be a situation. Let's say next water, there are too many micro services to other micro services came and they started utilizing your widget in this complicated scenario. If at all any single micro services or any single transaction is taking more response time like more causing potential problem like I mentioned. So if you want to trade that one so you have two deep dive into your micro services as well as other back end micro services which is interacting and other micro services which is consuming this micro service. So in this kind of complication situation, so I think observably will play a critical role so that will have more pictures when you have a complicated micro services interacting each other. So that what I was giving an example here at the back.
Basically, there are a lot of streams and downstream. Correct for a newer case.
Yes.
Then you need to have the observer database. You cannot on the performance of the situation.
Yes. Each micro services there will be their separate development team and other teams fans. So they were fighting our micro service is good or is not causing cos an issue of not using it is like you have to test yours and you have to know which are the services utilizing your micro services and what are the micro service you are using? So those kind of complication a complicated picture in cloud, the observability will definitely will. I am just curious. So I would like to see one example.
So basically it will bring a holistic view of your request.
Yes.
Everything in one view so that we can see what's going on.
Yes.
I mean, my thought is sorry, my connection. I'm in mountain. But anyway, contract testing that can also work somehow suspect only trace routing. And this is the only solution. How about contract testing? Because that's also at a unit layer you can test from one service interaction to the other.
Right. The contract listing is again, how many layers you can contract testing? Two or three maximum. But in case, if you have an enterprise system like a payment gateway, it talks to multiple layers. A third party layers might be the third party. Again, internal layers also might be there. So how do you interact with these mini layers? It's the N layer. Right. You cannot predict the layer.
I.
Want to apply for a credit card credit card application. Again, it will go even the crime information crime database. You have a motor vehicle database. So it talks to multiple databases on the back end. Everything is that party can.
All right.
So.
If there are so many in a big architecture at so many micro services, this distributed tracing will help in identifying the particular one of the micro service, which is the culprit it can identify.
You can drill down to the root as that's what I'm saying. Usually.
Sounds like an enhancement for monitoring. So whatever after taking the monitoring. Right. So you deep there and you observe all the back end and front end and middle layers. That's what observability come into picture and it will give you. So it will make your job easy whenever the complicated optical.
Yes.
Like Navin said earlier. So if it's a monolithic single application, a website application to air and DB, so it is easy to trace it when it's a cloud and Marc texture micro service architecture. So it's like the bubbles are heaps are lines, the travels, it will back Travers and you will find out roots. And it will highlight. That's what I understood by the explanation right now.
I yeah, that's correct. Yes. If it is a very three tier Accenture monitoring, if it is a cloud native, it should be observability.
Nothing.
So what I have to say is I have I am also working on micro services and those are deployed on AWS and basically on the To Kubert spot. And what I am trying to do is I'm trying to generate load from JMeter and then trying to test the micro services and I have the data coming in on Kiana. Okay. So I'm trying to understand if the Observability is something which Kabana also supports. If yes, then I would like to get more information about that. Because right now if I want to track down to to multiple layers of those micro services, because it's like I am calling from from let's say an AWS EC two instance, and then it's going to the micro services, then it's going to a third party vendor and then it's coming back again from there. So if I want to drill down based on all those network layers along with the each component, then Observability would be the best part. And that would help you to get all the stats on one one single instance instead of going to each system and getting those details. So what's your take on this? Do we have that Observable feature in Cabana as well?
See what ever tool. You're working right. Nowadays all the vendors they move to Observability term. The market term is observably. No. Okay, I am not working in Kiana, but I use Cabana only for log analytics. Okay, so logging is one pillar of observability. Okay, you buy logs by slicing and dicing again, you can deep dive into where the issue is. So that is one part of Observability. Yes, of course. The Kiana. Yes. Then I would say it supports the tracing mechanism.
Okay, but as you mentioned that Ravana has that ability to take down the log based on the trace ID. Do we have that feature in a because in Kiana we just log everything.
Right.
I'm not quite sure if that if that capability will have that in Kiana.
Ian, I think it should support you can just take it out on the documentation. That's what it nowadays everything is. Observability definitely keep an elastic company is one of the pioneer rate, so definitely they would have embraced with open trading mechanism. Okay. Yeah.
Thanks.
Yeah. Someone asked Ravana. Right, Gran?
Good. One moment for you.
So someone asked Gran. Alright, so Rafa again a separate product for tracing. It is called Tempo. So Gravano tempo again, it's a massively scale distributed the tracing system where you can place your request someone you can view your grain dashboard. So you have to use a graph tempo for that. Okay. Yes sir.
We can get one for your point for your topic. So you said Cabana, right? I think it should be a package. Elk Elastic Elastic Search log fashion Cabana. So if you combine all the three items, then you see full ability is enabled. Right? Maybe with Kiana alone, that might be some misses, but thank you.
I'm already using Elastic search as well. So it is a combination. I'm not using block stairs because I know that the retail is coming from just one system. So it's just Elastic Ikebana which I'm using to get my performance testing stats of the best retirement.
So it should be a package to my knowledge. And definitely if the three are enabled, then basically we started with the three basic pillars. Right. So all the three does all the three functions. So definitely it is one of the best examples. We can say Kiana Elk as the best example for observer team tool.
Yes, Colonel. Sorry, I just did a quick search elastic support distributor rating. The answer is yes.
Okay, maybe I'll have to take a look and see how we can enable that so that it will make my life easy.
Yes, there are manually. You can enable tracing by embedding the framework you are using or you can enable the automated distributor tracing. Okay.
Sounds good.
Thanks, Naveen. Thank you. Want its your turn now to speak? Sorry.
Okay. Yeah, I've been waiting actually. Yeah. I think most of the points were covered. So I wanted to stress upon more as you have already stated now that it's more of cloud native applications wherein containers are all gaining a lot of popularity. That's where Observability is really gaining prominence because recent he started exploring more on Kuber natives, and we are giving a webinar soon and I'm working on containerized applications actually. So we are coming up with strategy. What could be the best strategy from a performance testing and engineering perspective? So a few learnings which I had were with Huberts, especially with ne containerized environments. It's not the applications or the components are not available throughout. Even when you're testing, you are not sure whether your ports exist. As you stated already. Even due to auto scaling feature, it has its benefits that there won't be any deployment issues and all of that or not there. But it has its own challenges for performance testing and monitoring perspective. Like you don't know whether the components exist after your competition of the test. So that's where the challenge comes in and that's where monitoring APM tools alone wouldn't suffice. You definitely need to have Observability tools in place, and we are using a couple of tools like Prometheus Ravana is one thing and fluent. Also, we started exploring these days and new Relic is one. I think that was the first almost like a couple of years back. It started with open telemetry amongst all the APM tools. So that's where we are exploring further and it's helping out in the sense with APM tools, you really cannot get to a last mile deep dive of where exactly the problem is when you have these older logs. Observability essentially implies like you're tracing as you are stating and collecting different logs and metrics of your pods. What is the CPU utilization on your pods which no longer exists? And how was the performance when it is being auto? Scaling, scale up and scale down all those would help you correlate on the overall performance. So that's what I wanted to end.
Thanks, Sean. I think your bins next week, right?
Yeah. It's on 16th. Please join.
Thank you. Yeah, definitely. I will join.
I.
Have a question for one. You're talking about Premier Grain, right. Does it have the feature of available family Observability?
Yes. Promedia is actually only for the the log collection we are using Grana. So yes, Ravana is now being more projected like an observability tool and all of that it's big for Premiere.
We don't have any log to mechanical tool like the Plank or something.
Yeah. As I stated, it's like Plank is all in our current project. We don't have Plank, but yeah, I see Plank also has got Observability features, and in our current setup we are leveraging new relic plus these additional tools.
Yeah.
So why I'm asking so many questions because in the Cube, Nate, we are moving some apps. I know we are using Ad as plant. So the proposal came to move to our primary finance.
Yeah, due to ProMedia, it's like especially it's suited for this. It's a graduated project from CNC if it's like a pro, actually by CNC for good monitoring features and all of that so fluent is also gaining prominence.
Would you face the Arlington publish here somewhere?
Sure.
Yeah.
Thank you.
I will post it in LinkedIn today after the account.
Yeah. Thank you.
Thank you.
Along with me. Actually, Scott More, if most of you might be knowing, he is also copresenting with me.
Scott More.
So he's the director of Tri Center, correct. Right.
Yeah.
He moved to Price this year.
Yeah.
Okay.
One more feature. Sorry.
Go ahead. Please. Go ahead.
Yeah. Actually, one more feature if most of you are aware of it or no, I don't know. But even the load testing tools they are coming up with containerized load generation infrastructure. No load has it currently in the Eleven, a feature wherein you can spin up. It's like you have to allow your Cumene is clustered as an input, and then it automatically spins up and after a completion test, it shut them down as well.
So it's like you mean the load generator part?
Yes.
Okay.
So it supports Kuber Nets, an open shift. Both.
Correct. Right. Yeah.
Thank you. Thanks. And actually I forgot to tell another point about this open telemetry. Open telemetry is a vendor agnostic. So basically, if you are working in a diner, you are going to move to new leak, then it doesn't impact your telemetry open telemetry framework. So that is the main reason they created this open telemetry by combining open senses and open tracing. So if you adopt upon telemetry in your project then you are good because it's vendor agnostic, so no need to worry about which vendor you're going to use, which vendor is using right now. So that headache is gone. So no more problem about the vendors. There is also another advantage of using Open elementary if it works for any vendors, so you can check it out all the information in Open Telemetry IO website. So they clearly mentioned it is vendor Agnostic instrumentation supports both automatic and manual pressing. Okay, any other point topic?
I.
Just wanted to understand that as 70 also mentioned that she is using from Theseus for collecting the data and even myself have used near a Lake and as well as the DNA trace by using the pure part to observe the things. But over here I wanted to know if at this container or anything like even services is getting invoked. Even Google have put different kinds of service based calls where we can enhance our us and everything from the third particular relation. So when they are getting spent up at the run time, how they are getting collected in our current monitoring perspectives, I suppose I'm using a dock very basic example. That is like I'm using a Docker container using a meter to generate my load and at the run time on the back end side, there are two more containers in the same infrastructure has been initiated from the back end. So how I'm going to track that thing in my monitoring aspects?
You're talking about monitoring, right? Not observability.
Yeah. See observability. Basically what I sum up, I was just quite for a long time because I was just trying to understand what you guys from the servility point of we are talking about. So that I have also achieved in one of my projects using the pure path where I can trace to the end and identify that which particular component or a code piece like we were having different components over there, as you just mentioned for the bank application should there we were having an issue and we wanted to rectify it out. So that point of posibility at. But I wanted to understand that when these things are happening in a new kind of environment, like containerization applications, how we are solving that issue at the runtime.
So you're talking about any specific tool or generally I'm on a general perspective.
I wanted to understand this.
See, Docker is running on some host, correct? Yeah, it should run somewhere right in some machine. Right. But machine so to have the agent or that instrumentation capability so that it will push the metric to the dashboard. Okay. But if the containers the host is spinning on the flight, then you need to have embraced the open telemetry or the framework so that you can trace everything in your infrastructure.
Okay. So in that means I have to go through that first open telemetry, then I'll able to understand it better. Thank you.
Because it uses again, there are a lot of technologies like a service, right where it will look for. It will manage all your networking related stuff. So again, so there are a lot of it's complex. If you go deep.
Right.
It will be very complex. That is why we should have one solution to observe the entire stack.
Okay. So that I can achieve it out with the dentist. Right. And with the help of pure path.
No, that's what I'm saying. If the infrastructure is scaling in and out dynamically, then the the world APM tools, right. It cannot identify your performance. But not enough.
Im tools are coming with the distributed tracking rate.
Now what is it is coming with distribute racing. It will capture everything. But I'm talking about again 510 years ago.
Yeah. Sorry for that. I actually started a couple of years back only. So whatever things I have learned, I just trying to understand with that base. Thank you so much.
Nowadays you can see the tracing ID in the address dashboard.
Yeah.
So that we're about to tell something?
No.
Actually, the telemetry I work with a.
Yes tempo Ana tempo. Again, it's it is for tracing. So it will store your logs. It will store your tracing ID and then it will display the span details. The final tempo tempo is. So again, it is very expensive. Again, I'm saying because the logging right. Logging is very expensive. So I don't think. Okay, I have everything. Then I'm good. Now we have to see the budget also because the observer stack again depends on what data you are storing and how long you are storing and what is the resolution. So it is a 1 second resolution. Again, you'll have a lot of logs. There's a second resolution. You have limited logs. So again, you need to see how many requests you are getting, how many layers I have, how many calls per month, then how many gigabytes you use to in terabytes? Right. So again, you have to increase the budget. So when you adopt this kind of framework, again, you need to allocate the eleven budget newer for infrastructure. So it is not like I have servility. I have open elementary. I'm good now. So again, there are a lot of tools which is optimizing again the a lot of vendors. They are popping up every day. I have seen Crib crib crib. So they talk about the data part. And we have an observed there's a company called Observe. So again, they optimize this particular login. So we have to deep dive into this zone. You will get a lot of information. So it is very expensive to store log. It's very, very expensive. Okay. So I think one of the blogs I have mentioned I read what is the solution to this? And as one of the reputed industry, he told that don't log anything. Right. So again, there are pros and cons of logs. So you have to optimize your needs. So which company you are going to enable logging? Which company you don't want? So you have to come up which part is using more issues in production? So you have to run some POC in production. Then you have to see what is a good strategy for the Observability. Okay, let me admit. Rakish haggis. Hi. Thank you for joining. Thank you.
Now, regarding the ability I have just been using for a few minutes, is the same as a log monitoring tool, or is it something totally different? No, just something like tickets who are going to suggest, like generally the organization level, something that going to be in place.
Right.
Then we can leverage whatever that's there in the augmentation.
Right. The log is just one aspect of Observability as. So it is just one pillar ability. We have metrics and races, and there are indicators. We propose a different approach. Right. So log is just one aspect of observability. Okay, so you need various parameters to build this stack for you. Just by seeing locks, you cannot fix the issue because billions, right.
Yeah.
True too.
I mean, obviously, once you get into it, you will feel the return based on what word of the requirements here we can, right?
Yeah. Sorry. Go ahead.
I haven't used a fan or any other tool. I have used a login site and Elastic search. Those comes under Observability or just the Iana Observability capability.
Okay, but again, you have to bring multiple in metrics you have to bring. You have to be tracing. Then you will have the Observe stack in Cabana.
What a stack.
Right.
Stack. And how to bring the distributed trading. So if you bring that feature again, you will get the Observability.
I think I have a final question saying that to have this absolute feature is your Dino trace. And what are the tools they are offering this Observe feature? Are they charging extra, like whatever they are charging on the news? If it's a race is going to provide Observability, so are they going to charge extra per organization? That also matters, right. If we suggest simply.
Yes, because you are going to store a lot of data. Right. So definitely there will be increase in logging capability, but especially for Observability. I don't know about pricing. We have to check it out, but I need to take expensive in general.
See, simply, we propose something. So definitely the second question will come to us. So we need to have a feature. What is the cost effective of that? Right.
Correct. It says Observant for Claudia. It supports it starts with $21 per month for a GB per host.
Okay. Okay.
Dont even dollars full stack monitoring, $69 per month for GB per host for us, per host, everything. So we have a thousand hosts it.
And if I'm not wrong, this APM tools and log tools, the themself itself coming with the subsite features to the clients.
Right? Correct. Otherwise, again, I can embrace the open telemetry library and then you can embed this and then you can store on your own internal. You can build your own stack. You don't want to go with any AP mender observed under.
Yeah, thanks.
So last month I have attended one webinar called From Observed. So actually I was browsing through from a link. I guess I'm an Advertisement that pops up and then I just existed for the so I go to Observe Inc. Okay. Observability the company number of Observed. So they have a very good demo. Why? What is the product about and what problem they are solving when it comes to Observability. So I suggest you to go to the blog or you can go to the videos in the YouTube channel also. So it's very informative the site. Again, it will not solve the problem. Again, you need to optimize the process of Observability, so they talk about that. And what is the product? It is not released. It actually it is not generally available. The product, they're still in stealth mode, but very soon they are going to release it to the public general availability. So you can just take it out. Observe Inc. Com. So I watched the demo. They said no need to do anything. If you just install is Observed, it will do everything for you.
The demo.
That case. Yeah, that's what I saw the demo I was doing. Okay school. And then I asked about stage environment. They told no, we have not explored the lower environments like no only production. I ask for some questions again, they don't have answers. They told we are still evolving. Eventually we'll publish everything in official documentation. So they use I think a Snowflake Snowflake where they store lots of data and then it will retrieve everything very fast, very, very fast. The retrieval speed on the zero maintenance. That's what they told. And it will scale automatically so we can check it out on their website. Again, there are a lot of vendors that are coming up. So if you attend the Cube Con, if you attend conferences like this, right. If you go to sponsor section, you can see around 50 plus companies right now. I'm in cloud environment. Everybody is mostly startups, so they solve a particular problem and you can just learn about the solution. Okay. Any questions? So Holy, we have to schedule another session on the Observability, probably after a few weeks. From performance engineers perspective, how we can embrace this technology. How what things we have to learn, how we can implement those things? Probably we can talk about after a few weeks. Okay. If you don't have any questions, then we can line up. Thanks for dining and have a good night. Then the session will be available on YouTube. If I got to tell the session is being recorded. I'm sorry. I should have informed you before itself. The session is recorded. I will publish in YouTube channel. Please. Take it off. Thank you, guys.
Thank you. Thank you.
Bye.
Bye.
Thanks for doing.
