Thanks everyone, for joining this clubhouse meet. Let us wait for two more minutes and then we can get started. Thanks everyone, for joining this week's clubhouse meet last week. I couldn't schedule because of my personal errands. So this week we have Shivam Mithra from Lincoln who is working as an SRE. We'll be talking about in SRE. So this week's sponsor is Loadtestworld dot.
Com.
Where Redline 13. If you want to run your geometry tests, scalable load tests, please check it out. The Redline 13. Com and they have conducted the conference last week. So all the recordings are available in the lottestworld. Com so you can check it out. And there are a lot of sessions about JMeter analysis and other stuff, so please don't miss. So please check it out lootetestoalt. Com and without further Ado, let us get started. Hi, Shivam, how are you doing?
Yeah. Hi, Navy and Hi everyone else. I am doing good. What about you?
Thanks for agreeing. Actually, I've been following up with you from past many weeks. I know you are a very busy person, so finally I got a hold of you. Thank you for agreeing to do a session for us. So let me give a quick background about my performance engineer's group. We have around almost 400 plus folks in the group and everybody has experience in performance testing and engineering. So everybody I can say two to three years experience to advanced level. And we are just focusing on performance things. And also we are eager to upscale ourselves to DevOps and SRE world. So that's why we've been conducting many sessions about performance and other things. So I hope your session and your inputs will definitely be helpful. Who wants to become SRE or DevOps world from performance testing experience? So I hope you'll be sharing your insights.
Yeah, sure. I will try my best to share whatever insights I have got from my experience as working as SRE. Sure. Yeah. Thank you.
So before we get started.
Please.
Note, this session is being recorded and once the session is done, I'll be publishing the audio in my YouTube channel. Thank you, everyone. So Shivam, could you please introduce yourself briefly and then we can get started?
Yeah, sure. So my name is Shivam and I have been working as an SRE from last four and a half years.
Now.
First I started as a DevOps engineer right after College and I was working at Directi in Mumbai for around two years and after that I joined LinkedIn as AI and here I have been working for almost close to three years now. This is mostly about me and I also have a YouTube channel where I basically teach on different subjects like operating system cooperative working Linux and SRE and DevOps stuff there. So you can also check out my YouTube channel. Also, that should be in my profile here in Clubhouse. That will be also helpful. Sure. Yeah.
Thank you, Shiram. So my first question would be like, what skill set tester or any engineer should have to get into DevOps culture or the SRE world. So what are the fundamentals we should know which will be helpful to get into that field?
Yeah, sure. So let me first discuss about responsibilities of SRE. So once I define the responsibilities, it will be easier to understand what type of skills are required for this.
Yes, sure.
Some of the main responsibilities for us is that we write a lot of code. So coding is very important and we typically write code for developing some tools. So these are mostly internal tools which we develop by writing code. And these tools mostly either they help in maybe optimizing performance of some applications, or they may reduce trial for all the teams that we have at LinkedIn, so it may reduce a lot of trial. So we developed this type of tools by writing code mostly in Python or Go or sometimes Bash scripts also. So mostly Python is more popular in DevOps and SRE world, and Go also has got a lot of popularity. So coding is one of the important, I will say, skills that you need in order to become SRE or DevOps. And other than this, we also look at a lot of other issues. So one of the important responsibility for SR is to go on call for the team. So typically there are a lot of teams inside a company and each company will have an acidity team, and each Sai team has an on call. So the main responsibility for the on call is that so whenever any issues arise in the production. So maybe LinkedIn is down, for example. And there are some issues with some of the services at LinkedIn on call who will be investigating that issue, finding the root cause for that issue and fixing it and also do postmortem for that. So the main reason for postmortem is that we need to analyze, why did this issue happen? What could we have done to prevent this? And we tried to have some preventive measures after that, so that the same incident does not happen again. So when we are going for on call work because you require a lot of knowledge of Linux because most of the machines in the production are Linux machines. So you require knowledge of troubleshooting Linux systems. Generally, you may require a lot of knowledge of networking, because most of the companies now have microservices architecture where you have a lot of services and they talk to each other on the network.
So.
Compared to working is another skill that you require, and of course, fundamentals of operating system are required since you are working on Linux machine. So knowing that basically if you run any command, for example, you should understand, what does that mean? Right? When you see the output of that command, you should understand, what does this mean? What does the memory mean? What is CPU means and all of this. So coding then operating six term component working Linux commands. So these are some of the important skills for SRE, and these are the kind of basic skills which anyone require if you want to go into field of SRE.
Got it.
But the topics you told it's very kind of a high level. If you say, for example, any language or operating system, how much expertise person should have, like, say, a couple of years experience or five years experience to become a real full time SRE. So because we can keep on learning right, there is no end to learn new stuff. So do we have any bar set?
So I do not think experience is a bar for this. I mean, it depends on companies to companies. Many companies do higher freshers itself. As, for example, and many companies may preference in the software engineering field. This type of field, for example, it depends on company to company. I will say that these are the basic requirements. And basically I'm saying in the sense that you require a good knowledge of operating system and networking and index. You should have, for example, for example, because if you are going for an interview, for example, most of the questions will be from this topic. So you should have a good understanding of this concept, because even if you go for software engineering, also, they will ask maybe questions on operating networking, because these are basics to computer science. But the type of questions in software engineering roles may be a bit different. Software development SD roles, for example, they will focus more on this subject.
Got it.
Okay.
So morning once you log into your email account.
Right.
So if the day starts from there from you right. So how does your day go? You'll be starting any issues previous day or you will just have meetings, a lot of meetings. So how does your day look?
Yeah, sure. So let me just add some more points to the previous topic of what topics to study, and then I will approach it to how they look in my life. Sure. So as I told, these are the basic skills, like coding is required and then Linux commands, understanding them open networking, and also our day to day work. For example, we also require a lot of knowledge of like system design, for example, because we are continuously working with developer team to design to review RFC's, for example. So we need also good knowledge of system design, for example, understanding load balancers, understanding how scaling works, for example, database application, for example. So we need to have good understanding of this subject because these are very helpful in designing any systems and also having a good understanding of troubleshooting, like how to troubleshoot issues in production. That also is very helpful. And one of the books that I will suggest for understanding these concepts, for example, like how to troubleshoot issues and understanding more about SRE itself. So Google actually started this SRE culture. So they were the first one to introduce the SRE role in the industry. And they also have written around, I think three books on this subject SRE. And one of the first book is on just an SRE concept. I think the book name is Site Relativity Engineering by Google. So if you do a Google search, you will get it. So that explains that has very good explanation of SRE concepts. And what are the responsibilities and how they operate at Google? Like how they operate their infrastructure at Google. Such a large scale infrastructure at Google.
Got it in your team. You will have a DevOps as well.
Right.
There is one team will be there.
Right.
Correct. So in my company, we do not have separate DevOps or Si. We have only Si. And for example, we have a tools team, basically. So we have a different tools team. So they actually manage all the like something little tools, for example, infrastructure itself, for example. And then we have separate SRE teams managing. I will say different services, for example. So you can say that we have a central team tooling team, and we have different SRE team again. And this tools team also have SRE team, basically. But their main responsibility is to manage all the tools that we have at LinkedIn.
So there are companies who are DevOps as well as SRE.
Right.
So do you have any difference from your perspective what would be the core differences between DevOps engineers and SRE engineers?
So in my view, the company, which typically a person for DevOps and SRE, I think the responsibility is different in my view. So the main responsibility of the DevOps engineer may be to manage infrastructure, for example, manage the Kubernetes cluster, manage the CICD pipeline, all of this reliability part itself. Like, for example, maybe the monitoring, for example, and looking at the reliability. And maybe they will have many other services. For example, Flip Amazon. They will have a lot of services also, like, they will have checking services. They will have feed page, for example, where they show all the items, for example. So maybe SRE will be working on improving the reliability of those services there.
Got it.
Okay.
So yeah. Back to my previous question. So I would like to know how your day looks.
Yeah.
So most of the day alliance according to the responsibilities we have. So we also have OK hours planning. And once we do the okay planning, we will have Jeertical created for all of them. So most of the time will go into like, we all will divide the OK. So most of the time of us go into those OK hours. And those OK hours will be mostly. Or maybe if I'm developing some tool writing some code or maybe in some quarter, I'm just working on maybe improving the performance of maybe some service. For example, or maybe in some quarters I am working on maybe capacity planning, for example. So there are different tasks and mostly we try sometimes operation we can be operation heavy sometimes when there are a lot of issues. Maybe. But most of the time we try that.
Okay.
We are working more on automation side, basically trying to decrease that while for everyone in the company those type of projects. So depending on what hours we have, we will mostly start working on that. There is one difference that we go on call per month once a week. So that week is very different. So we will not do any okay hours in that week we will mostly focus on like if we get some alerts during the on call, we will work on that. Or maybe if there are some ad hoc tasks, for example, maybe some ad hoc tasks that came after the hour planning, for example. So we will pick some of them and work on that during on call. Other than that, it's normal, like work on okay hours feed the zero tickets. And we also have sometimes will also be spent in meeting. Maybe you can say maybe four or 5 hours. Let's say goes on meeting.
Got it. Could you please give me about that on call process? Because there are certain strategies they follow, right. Who triggers on call and who manages the incident and who responds again. There is a cross functional team should be there. Can you give me this dialog over here? Because we've never been part of any on call as a performance engineer unless we work in production. So it will be helpful for everybody.
Yeah. Sure. For example, for us, it's mostly it depends on services to services mostly. So I am a part of product team at LinkedIn. So we have products basically. So we also have developer team, and we also have SRE team. So someone from SRE team also will be on call. Someone from developer team will also be on call because sometimes we may also require the help of developer team to debug the issue because maybe the issue is with the code that a developer has written, for example. So we do have these two types of teams. Sorry. Two types of on call here and on the on call. Like how we follow on call. It depends on size of the team. So let's say if I have five person in my team, let's say we go round Robin. So we start with one person, then the next and we keep on going round Robin. So on average we go like one week per month on call, but it depends on team size. Like if you have maybe 14 members in that team. So if you follow the round Robin approach, you may go on call once in two months, for example. And on call for us is one of the I would say best way to learn things in production the reason is that during on call you get to work on like you have issues in production. You need to travel to it, fix it. So you learn a lot in that. And it's not that you are alone. You are not alone. You are of course, the on call. But if you require help, you can ask your team other members for any help. Maybe if you require help from other teams. Also, we have a central knock team also who will manage all of this on call incident. So you can ask help from other teams. Also, because when you have microservice itecure, there is a high chance that a lot of when you have incidents, it will not be only affecting a single micro service. It will typically impact a lot of micro services. So we will also work along with other teams also in fixing this.
Got it.
Okay.
So which tool LinkedIn uses for the on call management in house tool?
We have similar tool like Payroll duty, but we have in house tool, basically, which we use for managing the on call, but similar to Pager duty. Okay.
So those who don't know about page of duty. So Page of Duty is one of the leading vendor, the on call management. So they have certifications as well, like incident responder, and they have multiple certifications so you can check it out their website. You can just give a try on those certifications.
Okay.
So let's move on.
Shivam.
After on call is done, you'll be preparing the postmortem, correct.
Yeah. So typically what we do is after the on call is over. We do a handover mostly. So that is like whoever is going on call next week, we do a hand over so that they understand. Okay. What happened in last week, for example, they will have a context on that. And postmodern is typically done in those cases like which impacts the site. Let's say maybe a lot of users we are seeing issues with LinkedIn, for example. So we typically divide this type of incident, like whether that is major incident, minor incident. So if we have major incident, of course we have to do postmodertem for that. If we have minor, then we have to check like, do we really need a postmortem in that? If you see that. Okay. If you do a postmortem and we can prevent this issue from happening again, let's say so. Of course we will do in that case. But if some time, if you see that there is no use of doing push model because we cannot improve anything or in that case, there is no need for that. Good.
And I know there's a term called blameless culture, right in the SRE world. So right. What is your perspective on that? Have you seen anything like people pointing fingers each other or it will be most of the incidents will be like unless without finding anybody, just solve it. So how it goes in your job.
One of the I will say major highlight in the ASAI culture is like having like, we should not blame anyone. Basically, having blamed this postmodertem. That is one of the culture of the SRE itself. And if you do not follow the culture, then SR does not make a lot of sense. If you do not follow this culture. One of the advantages of this culture is that okay. People can do mistakes. Of course, when you are doing writing code or managing infrastructure, you will do mistakes as humans. And we should not be blaming somebody. So one of the main thing about postmodern is that we should not blame anyone we should look at. Okay, how we could have avoided that, how we should avoid it. That if somebody did this mistake, how we can avoid this in the future, nobody else does the same mistake. Basically, that's our main intention of the postmodern, how to improve the system. And so that this incident does not happen again. So that's the main highlight of the postmortem that you mentioned, like having a and we typically do not blame anyone. If they do a mistake in production, we are human and we are surely going to do mistakes.
Yes, I agree. Thank you. So without violating NDA, could you tell me any incident you have been wait tough to solve or you solve it high level stuff, anything we'd like to share because we were not exposed to those kinds of incidents because we work in stage enrollment. So anything you can just give some generic example, anything?
Yeah, sure. I do not remember any of the major incidents. Maybe I have to go back a lot, but yeah, I can, of course, talk about generic incidents. Like what happens mostly. Like, for example, I am a part of Product SR team, and most of our applications are at the front end level, and we have a lot of metrics to track. We have alerts on a lot of metrics, for example. So basically, in the on call, we set up alerts on top of a lot of like, for services. For example, a service will have a lot of endpoints, for example. So we set up alerts on those endpoints. We monitor some of the important metrics, not all of them. So some of the important metrics can be something like a latency metrics. Like what is the latency of that end point? What is the percentage of that endpoint? These two are the most popular metrics that we set up alert on for every service. And we set up alert something like, for example, if the error rate goes above 1%, let's say also for ten minutes, for example. So for consecutive ten minutes, if the error rate goes above 1%, then typically through their phone call, they will be pinged on the phone. That okay. This incident is happening and your presence is required in that, and then it's not that okay. Typically you will think that okay. How do you travel through this? But we do have a lot of tools for this before going on call. Typically we have in which they will study like, okay, before on call, but all things to cover basically. So that when they go on call, they are used to those tools using those tools, which can make the debugging very easier. So we do have a lot of tools basically for monitoring this. So if you see some errors, we will try to maybe like, for example, whenever you see errors. So one of the main reason can be deployment, for example, right. Because maybe somebody has post wrong conflicts or maybe wrong code in the production and because of that era has increased. So we will look at okay, if we have some recent deployments, for example, maybe if deployments are also not there, maybe we will look at maybe whether we are a sort of capacity itself.
Maybe.
Some feed has become maybe let's say popular. Let's say viral, for example. And the traffic on the site has increased and we are not able to support that traffic. For example, before going on call, we do know that these are the most common issues that can happen, and we do that have in mind. But sometimes it happens. That okay. Even these common issues are not there, and some new issues has come out. So the typical process you follow is check the logs. Maybe if there are increase in errors, for example, check the logs. Okay. What are the errors you are seeing? And depending on what errors you have in the logs, then maybe it can be because since I told right, we have micro service, it's check that. Okay. If that error is coming from some other service or whether our own service is generating that error, depending on that, take the action. Again, if it is some other team, then maybe we will also ask their own call to look into this like, okay, because their services. And if it is our team itself, we may ask the developer team, for example. Similarly, if there is a latency, for example, like latency fees can also happen if you do not have enough capacity. And maybe let's say if you have application on Java, for example, and when you have, you do not have sufficient capacity, what can happen? The garbage collection metrics, for example, GC pause. This can increase in that case. So we have to see that.
Okay.
Whether these CPU metrics and CPU load, all of these are increasing. So that mostly means that okay, we need to increase our capacity, for example.
And suppose that you are getting paid at 03:00 a.m.. So you are in a sound sleep.
Right.
So what is the backup? So what will do that particular trigger incident. So what will happen to that incident?
So typically what happens is if you do not acknowledge it will get forward to some other mostly maybe manager or maybe secondary on call. So typically in many teams we have primary on call and secondary on call also. So it depends on the rules which you have set up. For example, if you have pager, you will set up the rules. For example, if let's say in ten minutes, if the primary on call does not maybe pick up the phone if they do not acknowledge it may be that.
Okay.
Let's Ping the secondary on call. Maybe even if the secondary does not maybe Ping the manager, for example, it depends on level. So maybe after manager, even manager does not pick up, for example, then maybe manager of manager. Basically it keeps on going. Basically, there are separate rules in that we typically keep two to three levels, because sometimes it can happen that maybe primary on call me is the phone. Okay.
Basically it may reach the CEO. In some cases no one is picking up, right.
It will mostly not happen. But mostly it may go back to the manager. And then if let's say I am not there, maybe somebody else will go and see the incident and they will help in that.
So these management will be done by some other respective team who is managing all the incidents.
Correct.
Who has to get the alerts, who has to get the phone calls and what is the cycle it should follow?
Right? Yeah. So we have like phone calls. Typically they will go to us on whenever they are central team also which manages all they know overall infrastructure. What is going on in that like one of the alerts that have fired which teams these alerts are responsible, which teams are responsible for this alert? They keep watching the infrastructure and they help in managing everything because most of the incidents do require a collaboration from multiple teams. So they help in that.
So, as you know, recently, Facebook also has gone down for about 8 hours for more than 8 hours. So sometimes it will require the peer attention as well in the companies. So that will be people, HR or PR. They will take care of all the communications outside to the public. So how the insurance will be handled in that scenario because it needs public attention. So who handles this PR related stuff apart from the technical aspects. So any insights on that?
I don't have much insights on this, but there are different teams who manage this, like basically managing like the communication part, for example. Right. And whatever they post, for example, publicly. So there are different teams which are responsible for this.
So in the on call, you and the PR team also will be part of your on call. In that case.
Correct.
It should be because otherwise they would have not known whether it should be communicated to outside world or not.
So if there are any major incidents, of course, all of the company will know that right. Let's say Facebook is down. Right. So that's a major incident, right. Everyone in a company will know that.
Okay.
Facebook is down, right. Maybe through email communication or maybe through any other communication that is a different communication, basically. And on call will, of course, will not be worried about those part ways. They will mostly be worried about fixing this as soon as they can troubleshoot and fix this issue.
Correct.
Yeah.
But some of the pressure would be there. And if something goes down, like DNS outage right. Last week, Facebook or BGP protocol or something. So your team will face the pressure, correct to fix this issue as soon as possible.
I will say depends, as I told, mostly, what happens is that these are major incidents. It will not be just one team. Right. Because if we have a DNS issue, for example, not only one team is impacted. So a lot of people will be involved in helping. Maybe someone from other teams also will be helping in trying to find out who's called and fixing it. Of course, the main team will also, of course, be focusing on that. But other teams also will be helpful in that because they will be aware that Facebook is down, for example, and about pressure. It depends on pressure is not always good. You cannot put pressure on them. Right. Exactly. That.
Okay.
Do it in five minutes or in ten minutes. It will not be very good, in my view, because if you increase the pressure, there is a high chance that it will not be fixed in that time, basically. So it's better to keep your mind. I will say relax during this time. Try to at least see, of course, it's difficult, but try to keep it relaxed. And of course, in most companies, I do not think anybody will put pressure on your team. That okay. Do it within ten minutes, five minutes or something like that.
So there is no micro management approach in the SRE culture, right. The managers, they don't micromanage you when you are on call.
Yeah. So managers, what I have seen is from my experience, they provide a lot of support. And these micromanagements, I feel they are not very good. Like if you put pressure because for SRE responsibility is on call and if you have I mean, if you are not relaxed during on call, you are not going to do good. Basically. Right. If you do not get proper sleep during on call, and if you are worried about something else during on call, there are high chance that you will not be able to trouble them. So it is better to that's what the whole company supports, that you should not have this pressure. Got it. Okay.
Let us take some questions from the audience. Please raise your hand if you have any questions to ask to seem.
Okay.
I am admitting a couple of folks. Hi, Sid. Thanks for joining.
Hey, Navin please go ahead.
Yes.
What I understand from your extension.
Could you please a little bit louder? It is very not audible.
How about now? Is it okay?
Yes, it's better. Thank you.
Yeah.
So I feel like it's more like production support. Just correct me if it's related or not. And I have a couple of questions like you as SRE, what is your roles and responsibilities for any incident? What is your job per day?
Okay.
You have to do this and this and this, like postmortem and reason for problems and everything. And the second question is generally, yeah, I do work in microservices. I have got a chance to troubleshooting production support once. Like you said, we have a different approach. Like we have a war room where everyone will be sitting there and trying to do support, whatever we can do. Third question is what level coding you do generally, coding is being taken care of by developers. You explain a little bit like creating alerts and everything. So these questions I have as of now?
Sure. Yeah, sure. I will try to answer this. Sre is not production support at all, because only the on call, right. As I told, on call is basically around. If you see, maybe one week per month, right. Maybe 30%. Let's say, for example, 25%, for example. So that's only the support. Basically we are on call. That's all. Basically. Otherwise. Otherwise you're not on on call. You are working on other regular projects. Basically, maybe, as I told, maybe trying to develop some tool, for example, or trying to optimize performance, for example, all of this and trying to reduce that using some automation, of course, automation. Again, it may be coding, for example, in some cases and in some cases maybe you are using some tools already that are there and trying to design some other system which can help, for example. So that is the first part regarding war room. It depends. War rooms are created for us. Also, if we have some major incidents in my own incident, typically, for example, we can directly on the chat on the chatting platform we have, for example, we can do all the communication there itself if the incident is mine. But of course, if it is a major incident, you will have bar rooms and multiple people will be there discussing about how to fix it. And on coding side, what type of work we do. Setting up the alert is typical, not coding. I will say it's typically some maybe YAML, or maybe some other. This type of code coding is mostly like developing some tools, for example. So what developers do is developers typically write code for the website itself. Right. So they will, for example, if you have to add some new feature in the LinkedIn feed, for example. So developers will work on that. So they will write that code for that. But we are sorry we do not work on writing code for LinkedIn itself. Like we write maybe developing some tools, for example, which can reduce the Twil. So every time we monitor which are the things which are increasing the trial in the team, for example, we monitor those things and we keep a note of this thing. That okay. Like we are doing this work manually and we can automate this basically. So we include those hours basically. And someone can pick this up. And of course, then you have to design it how we can reduce that trial. And maybe if some code is required, for example, maybe if you are developing some CLI tool, for example, in Python or any other language which can make it easier. Let's say now the process was that okay. You went into X place, then to Y Place and then to Jade Place, and then you got the answer. So there you were going at three different places to find the answer. What if somebody can write a code, for example, where you have to only go to one place and you get the answer, for example. So that reduces the trial for everyone, not only for you. Maybe there are other customers also internal customers for this work for this tool, for example, so it decrease the trial for others also. Yeah.
Thanksgivom. But there is a limitation on that kind of tools. Production, sufficient tools are available. So there may be no chance of writing another tool which can automate the manual work.
Right. I'm not sure when that time will come if that time comes where you don't have any manual work, right. Of course, our life is mostly free. Right. We can directly go and maybe write code for the LinkedIn itself, right. Otherwise. But yeah, I do not think, of course, it's very tough to have an infrastructure where there will be 0% trial, even if, of course, you have serverless and everything coming up. Even in that case, it's very tough to have an environment where manual and intervention is mandatory. I agree.
And one more important question.
What type of SREs.
We do come across before SREs? We have a developer tester and even network engineers and everything. So how do they assign this kind of SRE you should be. And let's take your example what kind of roles and responsibilities you have as SRE? You can give generic not related to your regular job.
Yeah.
So basically the main focus for SRE is keeping the site up. So that's what site availability engineer is. So our main focus of first. I mean, for example, of Facebook, for example, like if Facebook went down. So as far as will be the first one, basically, who will be paying that. Okay. Facebook has gone down basically. So they will be the first one who will start investigating this issue and trying to find the root cause for them because their main goal is to keep the site up basically. So that's my main responsibility and typically we say site up, but that's typically service up because site is basically a combination of a lot of services. So that's the case keeping the service up like most of the time. So of course, having 100% algorithm is again, not that easy. So we try to have some SLOs, basically, service level objectives like, okay, what is the availability we are targeting? For example, we may target 99.9%, for example. So we do agree within our team that okay. There's a chance that we will not be able. There are chance that whatever percent is left, for example, right may go down for that time. We all agree on that. And that's the main part of having the SRE culture. We know that failures are going to happen, like we should be ready for that. So that's why we try to maybe develop tools to detect it better. For example, for example, if you have tools, maybe like some teams also work on machine learning, for example, develop some tools which can help us catch some anomalies, for example, in production, for example, using some graphs and all, for example. So that's our main responsibility. Our main focus is that keep the site up, maintain the reliability numbers, what we are targeting and try to improve it. But of course, we never target for 100% because investment required for 100% is a lot high and it's not guaranteed also that 100% can be achieved. True.
I was asking about more responsibilities of group of sites. There is an incident which is says your microservice is not available. So incident is created. So a couple of you folks will be jumping in and on call and start digging in.
Right. Right.
So what individual responsibilities like, what is your responsibility? So do they segregate SRE one has to do a kind of development for SRE two has to do networking SRE two, three monitor the metrics. I was kind of interested in that information.
Okay. When we have incidents, for example, it's typically the on call. We will do most of them. So that's what the main responsibility on call is. So they'll be looking at metrics, for example, like which metrics has gone back? They will look at all the other graphs. They will look at log. So it's their responsibility. Basically look at everything. And in some cases, as I told before, other teams help will be required. For example, maybe you think that okay. Maybe. Let's say I am part of maybe some service X, for example. Right. And maybe I have some inputs, for example. But sometimes the issue may be with the networking itself. Right? Not with my tool itself. Maybe the issue is networking infrastructure. And of course, networking infrastructure is managed. Maybe. Let's say, by different invoice. I have to investigate and find out that the issue is happening from the networking side. And maybe in mostly the networking side will also be aware that there are some issues because they also are having some metrics on the networking side, so they will not know that. Okay. There are some issues happening. Then we will, of course, then sync up and inform to them that the issue has happened. And if the issue is from our side itself, then we need to of course, for example, most of the issues are maybe errors, increasing errors. For example, we need to see that how the error has increased right from the log. We have to find out that and maybe involve again because we have not written code for that. Most developers have it. So maybe we may involve developers also in that to look at like why that is happening. Maybe somebody has post a bad code during the last deployment, for example. So we may need to roll back. Maybe in some cases, for example, in that.
So generally, how many SREs will be available for any single instance? Like you will be coordinating everyone and looking thing that boss your development. You have to involve a networking team.
To clarify that every team has. My team has as far. So I am the main person responsible for that as a on call. And if the networking team has another SR team, they also have on call. So they are responsible for everything they do networking all the teams like whatever SR teams we have. Each SR team has their own call and it's their main responsibility, right. If you need help, of course, I can engage others. Also, like, for example, who are seniors in my team and who have more knowledge of that. I've been involved with them also. But that is the worst case scenario if I'm not able to handle it on my own. For example.
Yeah, that answer everything.
Thanks.
I was kind of looking in how many SREs will involve involved in any single instance and to become an SRE, what level coding? I have to be prepared. This is my last question. So you understand?
Yeah, sure. Coding it's basically. Sorry.
I'm forwarding with a lot of questions. I'll stop with this and let her give the chance to.
Yeah.
Just give me 1 minute.
Yeah, sure. Thank you.
Meanwhile, you can give insights if you have any answers. Which I asked.
Yeah, we are performance engineers, production. I've been part of production issues, but not as a traditional SRE on call. Probably in future. It may change. I don't know.
You will get because now in last month, I have involved in Microservice, which was giving the problem in the product. So since we are so there is no product owner or business owner for micro services, I have to involve I have to play kind of SRE role. I have to keep on gathering everyone and the team is involved.
It's kind of war room.
I speak continuously for a long time. It happens sometimes I drink so much. So coming to coding part we do not require I will say very high level of coding as developers require, I will say, but we should be good at following the good practices. For example, if you develop some tool, for example. Right. You should maybe dog for that. Right. But having a dog for that, having some comments inside the code and also following the best practices, for example, because that tool is developed for the whole company. Right. Even if you leave the company, for example, others would also be able to contribute to that. So you should write in such a manner. But of course, we do not see for developers what happens. They have to write such a code that their code is in production. Basically. Right. Or they have external customers, for example. So they have to keep a lot of other things also in mind. But when we are developing tools, we are mostly developing it for internal purpose, for example. Okay. For example, UI, for example, right. If somebody writing word for linguine, for example, they have to take care of having, of course, the best practices and design that they can do. But for us, since our total internal, of course, we should have a UI, but that is not very perfect for you. That's working.
Okay.
Maybe if you have some form and you fill that up, even that's not a very high five. You guys Finland because mostly it's used only for internal purpose. Similarly, for code, also the requirement for scaling, right. Since only the internal team is using that, the scale requirement is different from what code that is writing for LinkedIn, for example. So it's fine even if you do not design for that much scaling, for example. Right. What developers are writing. So I will say that you do not require that much knowledge that developers require, for example. But you should follow the best practices of using whatever tools are available for linking, for example, framework and all. Then follow this. Like have comments everywhere. Follow the best practice. When you have errors, then you should catch them, not just the code directly. I use classes, all of this. So follow the best practice that we have.
I was asking in terms of in the point of interview.
In terms of coding, right? Yeah. I got it. So in terms of for interview perspective, mostly. I mean, of course, DSA is required, but not like software developer interviews. You should understand data structures as algorithms also. But yeah, of course not. Like what you see. Maybe hard problems or medium problems or deep code. So mostly if you are good at solving easy problems, solid code, in my view, that should be fine, mostly because even easy problems on lead code. For example, basic software structures are covered. So you should have a good understanding of, like time. Complicity, for example. Right. To understand how to calculate time complicity of your code, you should understand how much space your code is taking. So that's why knowledge of the algorithm becomes important in that, but not of course, that high knowledge has software. Thanks a lot.
This is a live example earlier to this we are only reading through the articles, but you are the live person. Thanks for writing everything. Navin. Thanks one.
I was just hearing back on the responsibilities of an SRE, so I heard a couple of times that as an SRE.
It'S the responsibility to keep the services up.
Now.
What I'm trying to understand is on the front end is the SR responsibility only to take care of the front end, like on the production and on the lower environments. Or it is also doing the performance thing on the back end microservices.
Because.
When we say front end, then it would call me hundreds of microservices and there would be a few other items to the front end.
Also.
In the SRE scope. When we talk about any of the application. If you can give some insights on that.
Yeah, sure. Typically we have different teams, for example. So on the front end side, for example, maybe front end is your traffic, for example, like traffic there, for example, where I need maybe some load balancer, for example, where it is the first point of contact whenever user visits your website. So that is traffic layer. So for traffic layer, maybe different teams are managing that they will have different SRE team. Also, it depends if your service is in production. Typically they will have SR team. But if your service is not in production, maybe let's say developer team itself can handle everything. For example, it depends on how critical your service is. A lot of responsive to SR comes like on call, for example, right. If you do not have very critical service, like maybe even if your service is down for one 2 hours, right. It's fine for you. Then it's fine. Maybe developers team, they can handle it. For example, they can travel. So your service is very critical. Even five minutes of downtime can cause a very huge loss to your company. For example, for example, Facebook 8 hours their loss will be, I think millions and billions for them 8 hours of downtime. So it becomes very critical for the SRE team there because SRE knows the best practices on them and also do this. Not the developers cannot do this right. And we should also encourage our developers also to have the reliability part in mind whenever they are writing some code. Understand that. Okay. Like what can go wrong? For example, in that in the worst case. But as a developer, what happens? It's tough for them also to write code, also design also and also manage this. It becomes very tough for them. Also, that's why this role is a bit divided. So even SRE also, they are mostly working on coding part and automation part, but other time like on call and other time they're improving the performance of the application and on the team wise, as I would say, it's not that. Okay. Only one team has SRE. Every team has SRE. I mean, whoever are in production, maybe database team has. Maybe there are other teams. Also, maybe mostly you have three components. Mostly, most items are like front end. Then you have a lot of applications in between. And then at last you may have databases and medication. Also, initially, each of these critical components has SRE team.
There for each team. And it's the responsibility of SRE to take care of the performances thing in the lower environment. And then when it goes into fraud. Also beyond call, like whenever there are fraud issues or like, rotation shift, that happens as a part of support the production support.
Right.
Yeah. So many responsibilities. We also do a lot of design reviews. For example, whenever a new code is being written, we also have collaboration with the developer team, and we do the review for that. So our main focus is on reliability. So we look the code in terms of okay, like what can go wrong, right. Maybe if somebody is writing some code which can increase the traffic on our website, for example. So we have to prepare for that before pushing that code into production. So we have to be ready with sufficient number of machines to serve that traffic. For example, we do take care of that type of reviews, for example. That's why, as I told, one of the important things to like, if you're going for interviews, understanding design part.
Right.
High level system design, like load balancers, replication, scaling. All of this is also important in that. Okay. Yeah.
And as a part of the SRE role, are you also responsible for monitoring and setting up the alert and maybe like thresholds for alerts. Also, in case if we have any cash like our services are running on ETS, we have a threshold for that as well. Like for our auto scaling. So how is SR responsible to decide all the thresholds and bring up the auto scaling in place? Or is it the architecture or it could be an architect who would pitch in here. And along with an SRE, we'll decide the auto scaling factor or the thresholds.
Here. I will say it depends on teams to teams. But for example, we do take care of, for example, alerting part. Right. So alerting is not a loan. Of course, we have to understand also from developers, right. Because when you are putting thresholds right, you will put thresholds depending on how critical the alert. You also need to understand from the development team.
Right.
Okay. How critical is this alert? For example, depending on that, you put alerts and of course, in the future, you also need to tune it. So that's also one of the main responsibilities of SREs to set up monitoring, set up alerts, set up thresholds. But of course we do not do it. We also call a very developer team because they understand those endpoints like how critical it is. And depending on that, we set up the alerts. And we also, of course, monitor those. Like maybe we have to sometimes tune those alerts, for example, in the future, because maybe the current threshold is a lot noisy, for example, in that case. Yeah, sure.
I think that answers all of my questions.
Thanks.
Actually, I thought I'd ask you two questions. One is asked by other than partially from Kunal. Actually, I would like to understand how performance do you involve in performance testing and engineering activities that will be separate team will take care of it. Do you have a dedicated team for performance testing and engineering activities as well? How different it is?
Sre has a lot of relation with performance engineering, since we also try to tune the performance and for example, load testing, because for low testing, again, you will have different code written and even your load testing. Whatever tool you have for load testing, right. You also need to have a good reliability for them. Load testing should also be should be load testing itself. Right. Maybe you're not doing the load testing, right. For example. So there will be maybe separate SRE team development team for just managing that both, for example. But all SRE team, like whatever services will our load testing will be done, maybe frequently. Let's say maybe every week, for example, and we will see the numbers. What is the low testing for our service, for example? And we need to see that.
Okay.
Whatever traffic we are thinking like, what traffic will come in future? Do we have sufficient capacity now or not? And if you do not have depending on load test numbers, we may need to increase. So that's also one of the main responsibility, I will say, but not conducting the load test itself. Of course, there will be tools for doing that. But understanding those load test numbers and taking decisions based on that is also one of the main reasons.
So we'll be regularly interacting with the load test team performance test.
Right. So Lotus numbers. Are you looking at that frequently and there is some help required from, let's say, the low testing team. For example.
If you find any issues in the lower environment, you will be suggesting developers want to fix and where to fix our developer how the interaction happens.
So again, it depends if you know the root cause. For example, you know that issue is happening. Of course, then you can directly communicate to them. This is the bottleneck, and we need to maybe improve that. But let's say, okay, you don't know the root cause. For example, it can happen because maybe that because there's a separate team for other things. So you do not know the road calls for that. So maybe you may tell them that. Okay. This is the issue. And maybe then you both try to find out the root cause. Let's say if that team is responsible for that, then of course they will fix it. But of course you can suggest it. If you know the root cause, this team is having some issue with that this code, of course you can. They will work on fixing those.
I mean, responsible for even database part. Also, no.
It'S for every service which affects the production. Basically, database. Also, database service. Any service that affects the production. Right. Database is one of the major ones that affect the production, of course, database traffic. For example, every other service that is critical. Right. All the micro services that are critical in nature for the company for the site of thank you.
So I have few questions, actually. So when it comes to observability or monitoring, so what kind of tool sets Microsoft uses, of course, I don't think they will be using any commercial tools. So what is this tool stack looks like for SREs?
Yeah, we do have internal tools, but the stack is similar to what you see. For example, in open source, for example, for example, you will have something to emit the data, for example, some tool to emit the data to some central database. For example, like times these database where all these data will be stored for every second or something. Right. All the data points are stored. Then you have a visualization tool. Basically. Right. For example, Grafana, is there an open source where you can see all these graphs? You can plot all these graphs. And if we have similar to similar to that where we collect the data, then we have some tool to show this as a graph. For example, then you can, of course, do some changes in graphs.
Also.
Right. You want to see one, two area. What do you want to see? You want to see average you want to see maybe something else, like some other metric, for example. So all of these features are there like, similar to what tools we have in open source. Okay.
So there is no commercial tools you guys are using for monitoring or observability, like Dinatrace or Dynamics.
Like that?
I would say it depends on a team to team if some team requires, for example, it depends on requirement or requirement. If some teams require that, of course, they can use it. Some people not require if we have enough features in whatever we have developed. For example. Right. Correct for load testing.
Also, mostly like JMeter or Low test open source business tools.
Correct. So I cannot comment much on LinkedIn uses, but it's a combination of both using some of the open source also, and also maybe it depends on requirements or requirements we will also use, for example, weather specific. There is requirement, for example, and many of the tools that are developed.
Hi, Pavan, thanks for joining. You are on Mute.
Hi.
Good morning.
Hi.
Thanks for joining us.
Hi, Pablo.
Hi, Shivam. I actually kind of missed a very good part of the conversation. But I just had a question to you. State reliability engineering means the overall process and the implementation and the framework around it is kind of technology agnostic.
Right.
But from the industry perspective, whether we are looking at products or services.
Right.
So we have a different view for that. Now, I just have a question to you. Let's say I have a request for a proposal in front of me and I want to approach a customer. So customer would be basically approached in two ways. One is what is the existing kind of operations, so as to say plethora with the combination of DevOps SRE and chaos or whatever it is. So my question is, how do I take this as a potential customer in a lead funnel? So that is one question, because from the technical aspect, we all know that you have beautifully explained probably what we do. What are the process to build an SRE team is a very big investment because it basically has a mixed pool of knowledge kind of side hut hustling between DevOps SRE performance architects with observability and so on and so forth. So how do I uniquely place and sell the SRE? And what is the return of have you ever given any return of investment to whatever that has been done for a particular customer? So I just want to understand this.
Thank you. In terms of customer since, for example, most companies that I have worked right. So they were mostly like the customers were mostly the normal user, for example. But if you are mostly talking about maybe B two B companies, for example, right. Where you have external customers, like business customers, for example. Right. So in terms of how much return of like how much returns you make on investment SRE, for example, it depends on how you execute that.
Right.
Like SRE is a very big field in itself. Right. It depends on how you execute it. For example, in the initiative, for example, the blameless postmodertem part, for example. Right. So if you do not follow this, for example, right. Maybe whatever investment you do, for example, it may not be very good. For example, you could not follow that, for example, because you are going to create the same issues again here. Right. So the main focus of the liability engineers are on improving these metrics. And like SLOs, for example, one of the important metrics through which you can track. Right. You have a defined metrics for this, right. If you are doing some investment, you have to follow some of the metrics. That okay. We are doing good on that. So as a loss for each of the service is one of the metrics that we use, for example, to understand, because our main responsibility is site up. Right. And we should be able to keep that metrics up whatever we are targeting, for example. So if you are able to do that. Of course, whatever investments has been done right. That is working. For example, postmortems, for example, right. Driving the postmortems, making sure that postmortems.
Okay.
You have a defined postmodertem in a good way. Right. Blameless way. If you define postmortem in like somewhere like, okay, everyone comes and somebody blames that he has done this thing and you do not do anything, you just blame it and you do not have any action items after the postmodern. There is no use of postmodertem at all. Right. Postmodertem is done mostly to make sure that those type of issues will not happen again. Make sure that. So if you are able to find out that right. Basically, you are preventing that thing from happening again. Right. So of course, that's a very good return if you are able to do that. And other than that, as far as typically, what happens.
Not take too much of time.
I understand.
What do you mean by postmortem? And how do you break that to a return of investment? Because, see, this is a classic scenario, even in our load testing or in our performance engineering aspect. Navin also can resonate on this. How do you actually give a return of investment to the customer based on the bottom and the site rail and reliability engineering perspective? It's even a broader feature because we are basically looking at the end to end stack with various deployment patterns. If there is a micro service, you have various deployment patterns, reliability engineering. There are again, different patterns, deployment methodologies like blue deployment or a green deployment and all those things. It's just that my point of view, because without giving a point of selling or for a minimum value for MVP kind of thing, we will not be able to sell the proposal to the customer. Otherwise, it's just that as a part of the organization, you just build a pool of engineers where you call them as SRE, DevOps and all those people. How do you take that as a thing to the cost more lengthier. But if possible, you can give me short description. Or maybe you can take it in the next session.
Yeah, sure. You can take in other terms. Right. So as I have told, responsibility, let's say, if you do not do SREV right, if you do not do that, so what other way you are going to do? You have infrastructure, you have to manage it, for example. And you know that if your infrastructure is maybe if it is small, maybe even developers can manage it. For example, it is very small. But if you have infrastructure, that is quite big and you know that even your infrastructure going down for 510 minutes, right will impact a lot of customers. One of the important points I want to mention also is that we also try to, for example, deployment part you mentioned.
Right.
We also try to increase the velocity of deployment because most of the big companies, they do a lot of deployments per day. Right. So we have to make sure that a lot of deployments go on a single day. Right. Even. Let's say if some of the deployments is missed, it will also be not good. Right. Because developers are writing code and their main. So if you see the main incentive for developers, they write code post into production. Right. And make it live. And as far as we also try to make this mother for them, that okay. This will not also face any issues. So think about scenario where you do not have SRS, right. So what type of maybe engineers you will have to manage this type of things? Let's say and then think of okay. If that gives you a better return than SRE, that's fine. Right. If it's not, then you may follow SRE pattern in that. Like, whatever responsibilities you have, for example, in terms of deployment monitoring, in terms of automation. And also since SR is mostly like for developers, they mostly write code, also do know a lot about overall infrastructure, right. They will also have some knowledge about traffic. They will have some knowledge about database. Of course not. As like what database SRE will have. But they will have some knowledge which will be helpful in multiple incidents in such a way. So they do have a good knowledge of how the infrastructure design at any company. They know most of the things. And that becomes helpful. Like, for example, you are collaborating with a developers and they have some doubts you can help in that also during incidents. You know that.
Okay.
This may be causing the issue because when you have microservice, it's not that you should only know about your micro service because you are connected with every other micro services.
Also.
Read that book because Google has invested a lot in SRE, for example. And they have written a book from what they have experienced. Right. How the SRE process has made like, for example, managing the Google infrastructure better. Right. So you will get a lot of insights from that book also. Yeah.
I picked up a very good book on Sarah actually been reading on that, but it seems like a lot of things kind of in a Pandora box, right. There are a lot of things to be understood there. And I think I guess that is what makes this particular thing very challenging and very rewardable.
Also.
Thanks, Navi.
Your voice is breaking. Probably you can give me offline chat or question.
I thought I was asking.
How about you people searching in Java design patterns and code profiling.
Yeah.
So it depends on engineers to engineers. I mean, some people also get fast, right. And many of them also deep dive into the core itself. Profiling and all. But I saw our main responsibility, but we do have to look into that. Some of the engineers are very good at that. And some of them. Maybe, for example, if I'm not good at that, maybe I will ask that person who is very good at that, for example, to maybe look at the profiling because of the issues can arise. As I told, maybe your garbage collection metrics gets impacted because of some reason. So we may ask someone who knows a lot about this to take out that.
Yeah.
Thanks.
A collaborative work as a team. It's not one person.
Yeah. Because it's not easy to have all of this since you have a lot of things to look after.
Right.
So somebody may be good at very good at maybe monitoring part, for example. So we will take help from them, for example, they have very good knowledge of that. Similarly, for example, in profiling and all optimizing performance for Java application. If somebody has good knowledge of that, we will take help from them also and try to learn that. Yes. Many.
Thanks, Shivam, for your insights.
Definitely.
It was helpful for many of us. So the session will be available in my YouTube channel so you can check it out. So thank you, Shivam. So how can we touch base with you if someone has any questions or any insights?
Yeah. Sure. So my LinkedIn profile is there in the profile here in the house itself, so you can contact me there itself. If you have any doubts for anything. Sure.
Thank you. Thank you, sir. So before we leave this week's, sponsor is a red line 13. So if you want to do a large scale geometry test, please check it out. Redline 13.
Com.
So next week we'll have another interesting topic to coming up with another guest. So please watch my LinkedIn posts for further updates. Thank you, everyone. Have a great weekend.
Thank you.
Bye.
Thank you. And everyone who joined. Thank you.
Thank you.
Bye.
Bye.
